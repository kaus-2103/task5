<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Scrollable Bootstrap Table</title>
  <!-- Bootstrap CSS -->
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Set a fixed height for the table body */
    .table-body {
      max-height: 300px; /* Adjust as needed */
      overflow-y: auto;
    }
  </style>
</head>
<body>

<div class="container mt-5">
  <div class="row">
    <!-- Region Dropdown -->
    <div class="col-md-3">
      <div class="form-group">
        <label for="region">Region</label>
        <select class="form-control" id="region">
          <option value="Poland">Poland</option>
          <option value="USA">USA</option>
          <option value="UK">UK</option>
        </select>
      </div>
    </div>

    <!-- Error Slider/Number Input -->
    <div class="col-md-3">
      <div class="form-group">
        <label for="error">Error</label>
        <input type="range" class="form-control-range" id="error" min="0" max="10" step="0.1">
        <input type="number" class="form-control" id="errorValue">
      </div>
    </div>

    <!-- Seed Textbox -->
    <div class="col-md-3">
      <div class="form-group">
        <label for="seed">Seed</label>
        <input type="text" class="form-control" id="seed" readonly>
        <input type="number" class="form-control" id="seed_num">
        <button type="button" class="btn btn-primary" id="randomseed">Random</button>
        <button type="button" class="btn btn-primary" id="generateSeed">Generate</button>
      </div>
    </div>

    <!-- Export Button -->
    <div class="col-md-3 text-right">
      <div class="form-group">
        <button type="button" class="btn btn-primary" id="exportCSV">Export</button>
      </div>
    </div>
  </div>
</div>


  <div class="table-responsive">
    <table class="table table-striped" id="userTable">
      <thead>
        <tr>
          <th scope="col">ID</th>
          <th scope="col">Identifier</th>
          <th scope="col">Name</th>
          <th scope="col">Address</th>
          <th scope="col">Phone</th>
        </tr>
      </thead>
      <tbody class="table-body">
        <!-- User data will be dynamically added here -->
      </tbody>
    </table>
  </div>
</div>

<!-- Bootstrap JS (optional) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
$(document).ready(function() {
  
  $('#error').on('input', function() {
    if (!$('#errorValue').is(':focus')) {
      $('#errorValue').val($(this).val());
    }
  });

  $('#errorValue').on('input', function() {
    $('#error').val($(this).val());
  });

  // Generate random seed with up to 7 digits when button is clicked
  $('#randomseed').click(function() {
    var seed = Math.floor(Math.random() * 10000000); 
    $('#seed').val(seed);
  });

  $('#seed_num').on('input', function() {
  var seed = $(this).val();
  $('#seed').val(seed);
});


  // Generate fake data when "Generate" button is clicked
  $('#generateSeed').click(function() {
    $('#userTable tbody').empty();
    generateFakeData({ scroll: false });
  });

  function exportCSV(data) {
  const headers = Object.keys(data[0]);
  let csvContent = headers.join(",") + "\n";
  data.forEach(row => {
    const values = headers.map(header => {
      const value = row[header].includes(",") ? `"${row[header]}"` : row[header];
      return value;
    });
    csvContent += values.join(",") + "\n";
  });
  const encodedUri = encodeURI("data:text/csv;charset=utf-8," + csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "generated_data.csv");
  document.body.appendChild(link);
  link.click();
}



  // Click Event for Export Button
$('#exportCSV').click(function() {
  const tableData = $('#userTable tbody tr').map(function() {
    return {
      ID: $(this).find('td:eq(0)').text(),
      Identifier: $(this).find('td:eq(1)').text(),
      Name: $(this).find('td:eq(2)').text(),
      Address: $(this).find('td:eq(3)').text(),
      Phone: $(this).find('td:eq(4)').text()
    };
  }).get();
  exportCSV(tableData);
});

  // Debounce function to delay execution of the passed function
  function debounce(func, delay) {
    let timeout;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(timeout);
      timeout = setTimeout(function() {
        func.apply(context, args);
      }, delay);
    };
  }

  // Generate fake data function
  const delayedGenerateFakeData = debounce(generateFakeData, 200); // 200ms delay

  // Function to generate fake data
  function generateFakeData(params) {
  var seed = $('#seed').val();
  var region = $('#region').val();
  var errorValue_1 = parseFloat($('#error').val()); 
  var errorValue_2 = parseFloat($('#errorValue').val());

  var errorValue;
  if (errorValue_1 > errorValue_2) {
    errorValue = errorValue_1;
  } else {
    errorValue = errorValue_2;
  }

    console.log(errorValue);

    $.ajax({
      url: '/generate_fake_data',
      method: 'GET',
      data: {
        seed: seed,
        region: region,
        error_value: errorValue,
        scroll: params.scroll // Pass the scroll parameter here
      },
      success: function(data) {
        // Add new user data to the table without clearing existing rows
        data.forEach(function(user) {
          $('#userTable tbody').append(`
            <tr>
              <td>${user.id}</td>
              <td>${user.identifier}</td>
              <td>${user.name}</td>
              <td>${user.address}</td>
              <td>${user.phone}</td>
            </tr>
          `);
        });

        // Scroll to the bottom of the table
        $('#userTable').scrollTop($('#userTable')[0].scrollHeight);
      },
      error: function(xhr, status, error) {
        console.error(error);
      }
    });
  }

  function isAtBottom() {
    return window.innerHeight + window.scrollY >= document.body.offsetHeight;
  }
  
  window.addEventListener('scroll', function() {
    if (isAtBottom()) {
      delayedGenerateFakeData({ scroll: true }); // Call the debounced function
    }
  });
});

</script>

</body>
</html>
